const { expect, describe, it } = require('@jest/globals');
const { Score, Scores } = require('./index')

describe("Scoreboard", () => {
    it("sort the one with higher score first", () => {
        let s = []
        s.push(new Score("Levi", 3, 2, 2)) //score: 3*4 - 2 = 10
        s.push(new Score("Agus", 3, 4, 0)) //score: 3*4 - 4 = 8
        s.push(new Score("Anon", 3, 0, 4)) //score: 3*4 - 0 = 12
        let scores = new Scores(s)

        let expected = ["Anon", "Levi", "Agus"]
        expect(scores.topStudents()).toEqual(expected)
    })

    describe("when the scores are the same", () => {
        it("prioritize the one with larger correct answer", () => {
            let s = []
            s.push(new Score("Agus", 3, 4, 0)) //score: 3*4 - 4 = 8
            s.push(new Score("Budi", 2, 0, 5)) //score: 2*4 - 0 = 8
            let scores = new Scores(s)
    
            let expected = ["Agus", "Budi"]
            expect(scores.topStudents()).toEqual(expected)
        })

        describe("when they have the same correct answer", () => {
            it("prioritize the one with smaller name", () => {
                let s = []
                s.push(new Score("Agus", 2, 4, 0)) //score: 2*4 - 0 = 8
                s.push(new Score("Budi", 2, 4, 0)) //score: 2*4 - 0 = 8
                let scores = new Scores(s)
        
                let expected = ["Agus", "Budi"]
                expect(scores.topStudents()).toEqual(expected)
            })
        })
    })
    describe("large test case", () => {
        it("sort correctly", () => {
            let data = []
            let total = 20

            for (let i = 0; i <= total; i++) {
                for (let j = 0; j <= total - i; j++) {
                    let correct = i
                    let wrong = j
                    let empty = total - correct - wrong

                    data.push(new Score(correct+"-"+wrong+"-"+empty, correct, wrong, empty))
                }
            }
            let scores = new Scores(data)
            let expected = ["20-0-0", "19-0-1", "19-1-0", "18-0-2", "18-1-1", "18-2-0", "17-0-3", "17-1-2",
            "17-2-1", "17-3-0", "16-0-4", "16-1-3", "16-2-2", "16-3-1", "16-4-0", "15-0-5",
            "15-1-4", "15-2-3", "15-3-2", "15-4-1", "14-0-6", "15-5-0", "14-1-5", "14-2-4",
            "14-3-3", "14-4-2", "13-0-7", "14-5-1", "13-1-6", "14-6-0", "13-2-5", "13-3-4",
            "13-4-3", "12-0-8", "13-5-2", "12-1-7", "13-6-1", "12-2-6", "13-7-0", "12-3-5",
            "12-4-4", "11-0-9", "12-5-3", "11-1-8", "12-6-2", "11-2-7", "12-7-1", "11-3-6",
            "12-8-0", "11-4-5", "10-0-10", "11-5-4", "10-1-9", "11-6-3", "10-2-8", "11-7-2",
            "10-3-7", "11-8-1", "10-4-6", "9-0-11", "11-9-0", "10-5-5", "9-1-10", "10-6-4",
            "9-2-9", "10-7-3", "9-3-8", "10-8-2", "9-4-7", "8-0-12", "10-9-1", "9-5-6",
            "8-1-11", "10-10-0", "9-6-5", "8-2-10", "9-7-4", "8-3-9", "9-8-3", "8-4-8",
            "7-0-13", "9-9-2", "8-5-7", "7-1-12", "9-10-1", "8-6-6", "7-2-11", "9-11-0",
            "8-7-5", "7-3-10", "8-8-4", "7-4-9", "6-0-14", "8-9-3", "7-5-8", "6-1-13",
            "8-10-2", "7-6-7", "6-2-12", "8-11-1", "7-7-6", "6-3-11", "8-12-0", "7-8-5",
            "6-4-10", "5-0-15", "7-9-4", "6-5-9", "5-1-14", "7-10-3", "6-6-8", "5-2-13",
            "7-11-2", "6-7-7", "5-3-12", "7-12-1", "6-8-6", "5-4-11", "4-0-16", "7-13-0",
            "6-9-5", "5-5-10", "4-1-15", "6-10-4", "5-6-9", "4-2-14", "6-11-3", "5-7-8",
            "4-3-13", "6-12-2", "5-8-7", "4-4-12", "3-0-17", "6-13-1", "5-9-6", "4-5-11",
            "3-1-16", "6-14-0", "5-10-5", "4-6-10", "3-2-15", "5-11-4", "4-7-9", "3-3-14",
            "5-12-3", "4-8-8", "3-4-13", "2-0-18", "5-13-2", "4-9-7", "3-5-12", "2-1-17",
            "5-14-1", "4-10-6", "3-6-11", "2-2-16", "5-15-0", "4-11-5", "3-7-10", "2-3-15",
            "4-12-4", "3-8-9", "2-4-14", "1-0-19", "4-13-3", "3-9-8", "2-5-13", "1-1-18",
            "4-14-2", "3-10-7", "2-6-12", "1-2-17", "4-15-1", "3-11-6", "2-7-11", "1-3-16",
            "4-16-0", "3-12-5", "2-8-10", "1-4-15", "0-0-20", "3-13-4", "2-9-9", "1-5-14",
            "0-1-19", "3-14-3", "2-10-8", "1-6-13", "0-2-18", "3-15-2", "2-11-7", "1-7-12",
            "0-3-17", "3-16-1", "2-12-6", "1-8-11", "0-4-16", "3-17-0", "2-13-5", "1-9-10",
            "0-5-15", "2-14-4", "1-10-9", "0-6-14", "2-15-3", "1-11-8", "0-7-13", "2-16-2",
            "1-12-7", "0-8-12", "2-17-1", "1-13-6", "0-9-11", "2-18-0", "1-14-5", "0-10-10",
            "1-15-4", "0-11-9", "1-16-3", "0-12-8", "1-17-2", "0-13-7", "1-18-1", "0-14-6",
            "1-19-0", "0-15-5", "0-16-4", "0-17-3", "0-18-2", "0-19-1", "0-20-0"]

            let got = scores.topStudents()
            expect(got).toEqual(expected)
        })
    })
})